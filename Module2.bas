Attribute VB_Name = "Module2"
Option Explicit
Public KillIt As Boolean
Public Declare Function IsWindow Lib "user32" (ByVal hwnd As Long) As Long
'Public Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
Public Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
Public Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Public Declare Function EnumWindows Lib "user32" (ByVal lpEnumFunc As Long, ByVal lParam As Long) As Long
Public Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long


Function StrZToStr(s As String) As String
   StrZToStr = Left$(s, Len(s) - 1)
End Function

Public Function getVersion() As Long
   Dim osinfo As OSVERSIONINFO
   Dim retvalue As Integer
   osinfo.dwOSVersionInfoSize = 148
   osinfo.szCSDVersion = Space$(128)
   retvalue = GetVersionExA(osinfo)
   getVersion = osinfo.dwPlatformId
End Function

 
 'API's Function Declarations

 Public Function ShowError(sText As String, sProcName As String)
   'this function displays an error that occurred
   
    Dim sMsg As String
    sMsg = "Error # " & Str(Err.Number) & " was generated by " _
         & Err.Source & vbCrLf & Err.Description
    MsgBox sMsg, vbCritical, sText & Space(1) & sProcName
    Exit Function


 End Function


 Public Function istaskrunning(sWindowName As String) As Boolean
    Dim hwnd As Long, hWndOffline As Long
   
    On Error GoTo IsTaskRunning_Eh
    'get handle of the application
    'if handle is 0 the application is currently not running
    hwnd = FindWindow(0&, sWindowName)
    If hwnd = 0 Then
        istaskrunning = False
        Exit Function
    Else
        istaskrunning = True
    End If
   

IsTaskRunning_Exit:
        Exit Function


IsTaskRunning_Eh:
    Call ShowError(sWindowName, "IsTaskRunning")

 End Function



'---------------------------------------------------------------------------------------
' Creation Date :   24/10/2005 09:03
' Created By    :   Jason Bruwer
' Purpose         :   Returns the windows handle of a window if you know the name
'                    :   E.g.
'                           Microsoft Word
'                           Microsoft Excel
'                           Microsoft PowerPoint
'                           Adobe Reader
' Updated By    :   [Initials] - [Date] - [Changes]
'---------------------------------------------------------------------------------------
Public Function GetWindowsHandle(WindowName As String, hWindow As Long) As Boolean

    On Error GoTo Errors

    ' Get the target's window handle.
    hWindow = FindWindow(vbNullString, WindowName)

    If hWindow = 0 Then GoTo Cheers

    GetWindowsHandle = True

Cheers:
    Exit Function
Errors:
    'frmMain.LogErrorAcrossUsingRBT ("GetWindowsHandle")
    GoTo Cheers
End Function


'---------------------------------------------------------------------------------------
' Creation Date :   24/10/2005 09:03
' Created By    :   Jason Bruwer
' Purpose        :   Enumerates all the currently open windows and searches for an application
'                        with the specified name.
' Updated By    :   [Initials] - [Date] - [Changes]
'---------------------------------------------------------------------------------------
Public Function TerminateTask(app_name As String) As Boolean

On Error GoTo Errors

Target = UCase(app_name)
EnumWindows AddressOf EnumCallback, 0

TerminateTask = True

Cheers:
Exit Function
Errors:
'frmMain.LogErrorAcrossUsingRBT ("TerminateTask")
GoTo Cheers
End Function


'---------------------------------------------------------------------------------------
' Creation Date :   24/10/2005 09:04
' Created By    :   Jason Bruwer
' Purpose         :  Checks to see if this is the window we are looking for and then trys
'                        to kill the application
' Updated By    :   [Initials] - [Date] - [Changes]
'---------------------------------------------------------------------------------------
Public Function EnumCallback(ByVal app_hWnd As Long, ByVal param As Long) As Long
Dim buf As String * 256
Dim title As String
Dim length As Long

' Get the window's title.
length = GetWindowText(app_hWnd, buf, Len(buf))
title = Left$(buf, length)

'If title <> "" Then Debug.Print title

' See if this is the target window.
If InStr(UCase(title), Target) <> 0 Then
    ' Kill the window.
    If Not KillProcess(app_hWnd) Then Exit Function
End If

' Continue searching.
EnumCallback = 1

End Function


'---------------------------------------------------------------------------------------
' Creation Date :   24/10/2005 09:06
' Created By    :   Jason Bruwer
' Purpose         :  Trys to kill an application by using its windows handle
' Updated By    :   [Initials] - [Date] - [Changes]
'---------------------------------------------------------------------------------------
Public Function KillProcess(hWindow As Long) As Boolean
Dim RetrunValue As Long
Dim ProcessValue As Long
Dim ProcessValueID As Long
Dim ThreadID As Long

    On Error GoTo Errors

    If (IsWindow(hWindow) <> 0) Then
      ThreadID = GetWindowThreadProcessId(hWindow, ProcessValueID)

      If (ProcessValueID <> 0) Then
        App.LogEvent "Warning...killing orphan process..."

        ProcessValue = OpenProcess(PROCESS_ALL_ACCESS, CLng(0), ProcessValueID)
        RetrunValue = TerminateProcess(ProcessValue, CLng(0))
        CloseHandle ProcessValueID
      End If

    End If

    KillProcess = True

Cheers:
    Exit Function
Errors:
    'frmMain.LogErrorAcrossUsingRBT ("KillProcess")
    GoTo Cheers
End Function

